<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="activeAudio" xml:space="preserve">
    <value>Active audio recording during test execution</value>
  </data>
  <data name="audioFile" xml:space="preserve">
    <value>Audio list file</value>
  </data>
  <data name="audioList" xml:space="preserve">
    <value>Audio Lists:</value>
  </data>
  <data name="audioRecordSuccess" xml:space="preserve">
    <value>Successfully recorded audio.</value>
  </data>
  <data name="backgroundColor" xml:space="preserve">
    <value>Background color to stimuli presentation</value>
  </data>
  <data name="beepDuration" xml:space="preserve">
    <value>Beep should last longer than 0 milliseconds.</value>
  </data>
  <data name="choose" xml:space="preserve">
    <value>choose</value>
  </data>
  <data name="colorFile" xml:space="preserve">
    <value>Color list file</value>
  </data>
  <data name="colors" xml:space="preserve">
    <value>Colors</value>
  </data>
  <data name="colorsList" xml:space="preserve">
    <value>Colors List</value>
  </data>
  <data name="colorWords" xml:space="preserve">
    <value>Word color for image and word expositions</value>
  </data>
  <data name="couldntEdit" xml:space="preserve">
    <value>Could not edit program</value>
  </data>
  <data name="default" xml:space="preserve">
    <value>default</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>The TestPlatform is a platform of computerized neuropsychological tests for the evaluation of executive functions. The product has the proposal to offer solutions innovating technologically in a practical and dynamic way. Intended for researchers, students and ordinary users. 

Technical Manager:
anacog@pobox.com - Ana Garcia

Developers: 
hugohon - Hugo Honda Ferreira 
fabiolamfleury - Fabíola Malta Fleury
gabrielalbino - Gabriel Batista Albino Silva; 
2018; 
More information: 
https://github.com/lab-neuro-comp/Test-Platform</value>
  </data>
  <data name="editProgram" xml:space="preserve">
    <value>Edit Program: </value>
  </data>
  <data name="emptyBox" xml:space="preserve">
    <value>Text field can't be empty.</value>
  </data>
  <data name="emptyList" xml:space="preserve">
    <value>The list is empty!</value>
  </data>
  <data name="emptyListName" xml:space="preserve">
    <value>The list name must be filled in.</value>
  </data>
  <data name="exclude" xml:space="preserve">
    <value>Delete: </value>
  </data>
  <data name="exclusionSucceeded" xml:space="preserve">
    <value>delete succeeded!</value>
  </data>
  <data name="expandImages" xml:space="preserve">
    <value>Expand image to fill screen</value>
  </data>
  <data name="experiment" xml:space="preserve">
    <value>Experiment</value>
  </data>
  <data name="experimentFiles" xml:space="preserve">
    <value>Path for experiments data is invalid.</value>
  </data>
  <data name="expoCancel" xml:space="preserve">
    <value>Exposition was cancelled.</value>
  </data>
  <data name="expoNumber" xml:space="preserve">
    <value>Exposition number must be greater than zero.</value>
  </data>
  <data name="expoRandomize" xml:space="preserve">
    <value>Random stimulus exposition according to list</value>
  </data>
  <data name="exportedFile" xml:space="preserve">
    <value>File exported successfully!</value>
  </data>
  <data name="expositionDuration" xml:space="preserve">
    <value>Exposition duration for each stimulus</value>
  </data>
  <data name="expoTime" xml:space="preserve">
    <value>Exposition time must be greater than zero.</value>
  </data>
  <data name="expoType" xml:space="preserve">
    <value>Exposition type:</value>
  </data>
  <data name="fieldNotRight" xml:space="preserve">
    <value>Some field was not filled in correctly.</value>
  </data>
  <data name="file" xml:space="preserve">
    <value>File </value>
  </data>
  <data name="fixpointColor" xml:space="preserve">
    <value>Fix point color</value>
  </data>
  <data name="fixpointEx" xml:space="preserve">
    <value>Fix point: cross or point</value>
  </data>
  <data name="fontSize" xml:space="preserve">
    <value>Font size to the following exposition types: word, word with audio and image with word</value>
  </data>
  <data name="help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="imageFile" xml:space="preserve">
    <value>Image list file</value>
  </data>
  <data name="imageFileError" xml:space="preserve">
    <value>Couldn't show image. You don't have permission to access this file or it can be corrupted.\n</value>
  </data>
  <data name="imageList" xml:space="preserve">
    <value>Image Lists:</value>
  </data>
  <data name="instructionBox" xml:space="preserve">
    <value>Write each of the instructions on separate lines.</value>
  </data>
  <data name="instructionBoxText" xml:space="preserve">
    <value>The participant must be clearly and uniformly oriented to test execution accordingly to participant group and experiment team.&lt;br&gt;&lt;br&gt;For classic Stroop Test basic instructions are: &lt;br&gt;'In this task you must speak the name of the color in which the words are painted.'&lt;br&gt;or&lt;br&gt;'In this task you should read the word displayed on the screen.'</value>
  </data>
  <data name="instructionsI" xml:space="preserve">
    <value>Instructions to be shown before test starts, each line will be shown in one screen</value>
  </data>
  <data name="intervalsTime" xml:space="preserve">
    <value>Time between each attempt</value>
  </data>
  <data name="intervalsTimeRandom" xml:space="preserve">
    <value>Variation of time between attempts</value>
  </data>
  <data name="intervalTime" xml:space="preserve">
    <value>Interval time must be greater than zero.</value>
  </data>
  <data name="invalid" xml:space="preserve">
    <value> invalid</value>
  </data>
  <data name="invalidExpoType" xml:space="preserve">
    <value>Exposition type is invalid!</value>
  </data>
  <data name="invalidPath" xml:space="preserve">
    <value>is an invalid path.</value>
  </data>
  <data name="list" xml:space="preserve">
    <value>The list '</value>
  </data>
  <data name="listExists" xml:space="preserve">
    <value>A list with this name already exists. \n Do you want to overwrite it?</value>
  </data>
  <data name="listNotSaved" xml:space="preserve">
    <value>The list won't be saved.</value>
  </data>
  <data name="listSaveSuccess" xml:space="preserve">
    <value>' was save successfully</value>
  </data>
  <data name="markLengthError" xml:space="preserve">
    <value>Field mark must be filled.</value>
  </data>
  <data name="markLengthError2" xml:space="preserve">
    <value>Mark must be expressed by one character only</value>
  </data>
  <data name="none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="notEdit" xml:space="preserve">
    <value>Program couldn't be edited.</value>
  </data>
  <data name="notFilledProperlyMessage" xml:space="preserve">
    <value>Some field was not filled in correctly.</value>
  </data>
  <data name="notFoundIn" xml:space="preserve">
    <value>\nwasn't found in location:\n</value>
  </data>
  <data name="numberExpositions" xml:space="preserve">
    <value>Number of times that stimulus will be exposed</value>
  </data>
  <data name="participantNameAlphanumericError" xml:space="preserve">
    <value>Nome do participante deve ser composto apenas de caracteres alphanumericos e sem espaços;\nExemplo: 'LuisAugusto'"</value>
  </data>
  <data name="participantNameLengthError" xml:space="preserve">
    <value>Participant name must be filled.</value>
  </data>
  <data name="positionInvalid" xml:space="preserve">
    <value>Number of stimulus positions is invalid, must be one of the following values: 1, 2, 4 or 8."</value>
  </data>
  <data name="programEdit" xml:space="preserve">
    <value>The program contains incorrect parameters and / or is incomplete! \nCorrect the program in the following interface.</value>
  </data>
  <data name="programExists" xml:space="preserve">
    <value>A program with this name already exists. \n Do you want to overwrite it?</value>
  </data>
  <data name="programNotAlphanumeric" xml:space="preserve">
    <value>The program name must be composed only of alphanumerical characters and no spaces; \ nExample: 'MyProgram'</value>
  </data>
  <data name="programNotFilled" xml:space="preserve">
    <value>The program name must be filled in.</value>
  </data>
  <data name="programNotSave" xml:space="preserve">
    <value>Program wil not be saved.</value>
  </data>
  <data name="programSave" xml:space="preserve">
    <value>Program saved.</value>
  </data>
  <data name="programSaved" xml:space="preserve">
    <value>Program was saved with successfully</value>
  </data>
  <data name="reactionTest" xml:space="preserve">
    <value>ReactionTest</value>
  </data>
  <data name="reallyExclude" xml:space="preserve">
    <value>Do you really want to delete</value>
  </data>
  <data name="selectDataFile" xml:space="preserve">
    <value>Select a data file!</value>
  </data>
  <data name="selectImage" xml:space="preserve">
    <value>You must select the image list file.</value>
  </data>
  <data name="selectPlace" xml:space="preserve">
    <value>Select file destination before recording</value>
  </data>
  <data name="selectTraining" xml:space="preserve">
    <value>Select a training program!</value>
  </data>
  <data name="stroopTest" xml:space="preserve">
    <value>StroopTest</value>
  </data>
  <data name="subtitleActive" xml:space="preserve">
    <value>Active subtitles for image type</value>
  </data>
  <data name="subtitleColor" xml:space="preserve">
    <value>Subititle color</value>
  </data>
  <data name="subtitlePosition" xml:space="preserve">
    <value>Subtitle position in relation to stimuli</value>
  </data>
  <data name="testName" xml:space="preserve">
    <value>Test name</value>
  </data>
  <data name="typeStimulus" xml:space="preserve">
    <value>Program stimulus category</value>
  </data>
  <data name="unavailableExpo" xml:space="preserve">
    <value>Exposition type currently unavailable.</value>
  </data>
  <data name="validColor" xml:space="preserve">
    <value>'contains invalid values! \ n The' color list must contain only hexadecimal values (example: # 000000)</value>
  </data>
  <data name="version" xml:space="preserve">
    <value>Versão</value>
  </data>
  <data name="wishToSave" xml:space="preserve">
    <value>Do you want to save the file</value>
  </data>
  <data name="wordColorList" xml:space="preserve">
    <value>Words with Colors List</value>
  </data>
  <data name="wordFile" xml:space="preserve">
    <value>Word list file</value>
  </data>
  <data name="wordList" xml:space="preserve">
    <value>Word Lists:</value>
  </data>
  <data name="words" xml:space="preserve">
    <value>Words</value>
  </data>
  <data name="wordsList" xml:space="preserve">
    <value>Words List</value>
  </data>
  <data name="colorMatch" xml:space="preserve">
    <value>Color doesn't follow hexadecimal pattern: #000000</value>
  </data>
  <data name="exportDirectory" xml:space="preserve">
    <value>Select a valid directory where there is no export from the platform</value>
  </data>
  <data name="fileNotFound" xml:space="preserve">
    <value>Couldn't find file on path: </value>
  </data>
  <data name="lists" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="removeItem" xml:space="preserve">
    <value>You must select item to be removed from list.</value>
  </data>
  <data name="selectAudio" xml:space="preserve">
    <value>You must select the audio list file.</value>
  </data>
  <data name="selectColor" xml:space="preserve">
    <value>You must select the color list file.</value>
  </data>
  <data name="selectWord" xml:space="preserve">
    <value>You must select the word list file.</value>
  </data>
  <data name="experimentHeader" xml:space="preserve">
    <value>experiment\tprogram\tProgram Type\t#\tParticipant\tdate\tInitial time\tTest time\tSequence</value>
  </data>
  <data name="experimentName" xml:space="preserve">
    <value>The experiment name must be composed only of alphanumerical characters and no spaces; \ nExample: 'MyExperiment'</value>
  </data>
  <data name="import" xml:space="preserve">
    <value>Files were imported sucessfully.</value>
  </data>
  <data name="intervalInvalid" xml:space="preserve">
    <value>\n Interval time between programs must be equal to zero or greater (miliseconds).</value>
  </data>
  <data name="parameter" xml:space="preserve">
    <value>File parameter written:</value>
  </data>
  <data name="parameterShould" xml:space="preserve">
    <value>\n should be:</value>
  </data>
  <data name="audioConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;List name&lt;/td&gt;
	    &lt;td&gt;Sets the name of the list that will be chosen in the program definition. It is recommended that the list name characterize the chosen set of elements and the step comprising, for 

example, "Victoria1". The order in which the elements are informed will be kept in the respective list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Audio list creation&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
            &lt;td&gt;Audios&lt;/td&gt;
            &lt;td&gt;Selects the folder containing the audio files to be placed in the list by the "Open" button.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;/tr&gt;
            &lt;td&gt;Delete Item&lt;/td&gt;
            &lt;td&gt;Excludes from the list the selected audio file with the "Delete" button.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;/tr&gt;
            &lt;td&gt;Move Item&lt;/td&gt;
            &lt;td&gt;Repositions the selected audio file in the list with the "Up" and "Down" buttons.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;/tr&gt;
            &lt;td&gt;Play audio&lt;/td&gt;
            &lt;td&gt;Represents the selected audio file using the computer's active sound devices. The selected File Name is displayed in the list and Location&lt;/td&gt;
         &lt;/tr&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="imageConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
	    &lt;td&gt;Sets the name of the list that will be chosen in the program definition. It is recommended that the list name characterize the chosen set of elements and the step comprising, for example, "Victoria1". The order in which the elements are informed will be kept in the respective list."&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;List options&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
            &lt;td&gt;Images&lt;/td&gt;
            &lt;td&gt;Selects the folder containing the images to be inserted in the list by the "Open" button.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Delete Item&lt;/td&gt;
            &lt;td&gt;Excludes from the list the image file selected with the "Delete" button.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Move Item&lt;/td&gt;
            &lt;td&gt;Moves the item on the list.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="newAudioInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Auditions of Tests Display&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;List&lt;/td&gt;
	    &lt;td&gt;This screen displays the audios recorded in the previously executed tests. The audios of the test execution will be recorded in a file named with the chosen program and the identification of the participant, if this combination has already occurred the new audios will be added to the same file.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Creating audio files in WAV format&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
            &lt;td&gt;Audio Creation&lt;/td&gt;
            &lt;td&gt;In this screen it is possible to record WAV format audio files to be used as files in audio lists. Recording starts when you click the Record button and is finished and can be saved by the Stop / Save button&lt;/td&gt;
         &lt;/tr&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="showAudioInstructions" xml:space="preserve">
    <value />
  </data>
  <data name="showDataInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Export as .cvs&lt;/td&gt;
            &lt;td&gt;It exports the results to a file with values separated by comma, which can be opened by spreadsheet editors programs (ex: libre office).&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
	 &lt;tr&gt;
	    &lt;td&gt;Play audio&lt;/td&gt;
	    &lt;td&gt;Option to transmit the recorded audio during the test run, if the program used had this option.&lt;/td&gt;
         &lt;/tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Results&lt;/th&gt;
         &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Program&lt;/td&gt;
            &lt;td&gt;Indicates the name of the program that was running at the time of the stimulus.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Participant&lt;/td&gt;
            &lt;td&gt;Shows the user name&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Date&lt;/td&gt;
            &lt;td&gt;Indicates the that date the program was run&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Starting time&lt;/td&gt;
            &lt;td&gt;Indicates the exact moment the user started the test&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Exposition(ms)&lt;/td&gt;
            &lt;td&gt;Indicates how long the exposure has appeared (if user responds the total exposure time is equivalent to the reaction time)&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Sequence&lt;/td&gt;
            &lt;td&gt;Indicates the chronological order in which the stimulu appeared for the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus type&lt;/td&gt;
            &lt;td&gt;Indicates which type of stimulus was shown to the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Subtitle&lt;/td&gt;
            &lt;td&gt;Indicates the caption displayed to the user&lt;/td&gt;
         &lt;/tr&gt;	
         &lt;tr&gt;
            &lt;td&gt;Subtitle position&lt;/td&gt;
            &lt;td&gt;Indicates in which position the caption was displayed&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus&lt;/td&gt;
            &lt;td&gt;Indicates the name of the stimulus that was displayed to the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus color&lt;/td&gt;
            &lt;td&gt;Indicates the color that the stimulus appeared to the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Audio&lt;/td&gt;
            &lt;td&gt;Information if there was audio capture during the stimulus&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt; 
     &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="technicalInformation" xml:space="preserve">
    <value>&lt;h1&gt; Technical Information &lt;/h1&gt; 
 
&lt;p&gt;
	 
&lt;/p&gt;
&lt;p&gt;
After installation, it is recommended to only use the shortcut that is created on the desktop, not tampering with the libraries and files that are used by the platform.
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
All program, list, and experiment setup created are stored in text format files, which should not be accessed directly, only via application. Besides these files, audio libraries and file manipulation (.zip) and localization specific files are used (in the case of this version, files for english).
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
This application was developed using the C # language in the Visual Studio IDE platform, compatible with Windows Vista operating system or superior.
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
Use the link &lt;a href="https://github.com/lab-neuro-comp/Test-Platform/releases"&gt;TestPlatform (Releases) &lt;/a&gt;to download any possible updates, checking the versino available there and your current version in about page.
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
For installation, the executable file must be placed in an application-only folder where the operating folders will be organized after the first run of the test as described below:
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
- TestPlatform (user-created folder for application use only)
- TestFiles (files generated by the application to run the test)
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
Files and folders inside TestFiles should not be accessed, running the risk of corrupting files and making them inaccessible to the program!
&lt;/p&gt;
	 
&lt;p&gt;
&lt;/p&gt;
To upgrade, the new version installation file must be run in the same folder as the previous version had been installed.</value>
  </data>
  <data name="viewHelp" xml:space="preserve">
    <value>&lt;h1&gt;TestPlatform&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;What is your question? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#how"&gt;How the platform works&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lists"&gt; Lists &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#programs"&gt; Programs &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#experiments"&gt; Experiments &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exec"&gt; Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#results"&gt; Results &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#import"&gt; Import/export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#stroop"&gt; StroopTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reaction"&gt; ReactionTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching"&gt; MatchingTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt; Platform Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recommend"&gt; Recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contact"&gt;Want to get in touch?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="how"&gt;How the platform works&lt;/h3&gt;
&lt;p&gt; This platform is used for definition, execution and result analysis of neuropsychological tests in pre defined paradigms. It works with units called lists, programs and experiments.&lt;/p&gt;
&lt;p&gt;L&lt;strong&gt;ists &lt;/strong&gt;are defined stimuli used in testing, being image, colors, words or audios.&lt;/p&gt;
&lt;p&gt;P&lt;strong&gt;rograms &lt;/strong&gt;are test protocols defined by researcher using the platform and it can be of the following kinds: StroopTest, ReactionTest or MatchingTest. Each one representing one different paradigm.&lt;/p&gt;
&lt;p&gt;E&lt;strong&gt;xperiments &lt;/strong&gt;are program collections, so that they can be executed in sequencies.&lt;/p&gt;
&lt;p&gt;Each platform page has it own help button (on the upper left section), so that specific information can be given. The left side bar in main page shows navigable parts of the system.&lt;/p&gt;
&lt;p&gt;The flow below describes how a program can be created, executed and has its results obtained in the system:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/procedureEN.png?raw=true" alt="Flow" width="521" height="403" /&gt;&lt;/p&gt;
&lt;h4 id="lists"&gt;Lists&lt;/h4&gt;
&lt;p&gt;Created lists will be used in programs. One must choose list type and create or edit it, giving a name and content. For audio lists files used must be of type ".wav", if you wish, you can record those files on tab "Audios" in lists. Image files can be diverse (.png, .jpeg, .bpm, and others). Color lists use hexadecimal naming.&lt;/p&gt;
&lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/listsEN.png?raw=true" alt="ListsMenu"/&gt;
&lt;h4 id="programs"&gt;Programs&lt;/h4&gt;
&lt;p&gt;The programs are test configurations and can be created in the following paradigms:  &lt;a href="#stroop"&gt; StroopTest &lt;/a&gt; , &lt;a href="#reaction"&gt;ReactionTest &lt;/a&gt;, &lt;a href="#matching"&gt;MatchingTest &lt;/a&gt;. Each program may or may not have lists (depending on how it was defined) and can be changed, deleted or retrieved at any time.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/programsEN.png?raw=true" alt="programs" /&gt;&lt;/p&gt;
&lt;h4 id="exec"&gt;Execution (Run)&lt;/h4&gt;
&lt;p&gt;To run a program or experiment, you must fill in the data in the toolbar, selecting what will be executed, who will be the participant and what will be the mark.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;The &lt;strong&gt;mark&lt;/strong&gt; is a keyboard signal generated by the program at the instant a stimulus is shown, normally used when a program is running in the background in conjunction with the platform, as an example neurospectrum, to collect more accurate data.&lt;/p&gt;
&lt;p&gt;After completing the entries, simply click on the run button that the test will occur and the results will be generated.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/execBarEN.png?raw=true" alt="execBar"/&gt;&lt;/p&gt;
&lt;h4 id="results"&gt;Results&lt;/h4&gt;
&lt;p&gt;The results are displayed on pages according to the type of test performed, in tables that can be exported to excel (.csv).&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/results.png?raw=true" alt="results" width="521" height="403" /&gt;&lt;/p&gt;
&lt;p&gt;When an experiment is run, the tables of the experiment and the respective programs that have been run are generated.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h4 id="results"&gt;Import/Export&lt;/h4&gt;
&lt;p&gt;If you need to use lists, programs, or experiments on more than one computer, you can export files and import them into the platform by accessing those features in the menu.&lt;/p&gt;
&lt;div&gt;
&lt;h3 id="stroop"&gt;StroopTest&lt;/h3&gt;
&lt;p&gt;It proposes the presentation of elements in sequence with exposure times and scheduled intervals. According to the Stroop paradigm, the presented elements carry some semantic conflict, such as the classic words of colored colors ( &lt;span style="color: #00ff00;"&gt;blue &lt;/span&gt;). StroopTest offers different categories of stimuli - word, image, audio - that can be combined individually or in pairs promoting the Stroop effect in several different versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="reaction"&gt;ReactionTest&lt;/h3&gt;
&lt;p&gt;It proposes the presentation of elements on screen that must have an interpretation from a response issued by the participant through the keyboard or touch screen. According to the reaction time paradigm, this response must be given as fast as possible, so that the expected response arises from the moment the element is displayed on the screen, and there may be an early response (commission) or there is no response after the display. ReactionTest provides different categories of stimuli - geometric shapes, image, words - that allow the evaluation of reaction time in several different versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="matching"&gt;MatchingTest&lt;/h3&gt;
&lt;p&gt;The matching tests with (or without) Model with Delay,Delay matching or non-matching-to-sample - DMTS / DNMTS are tests widely used in visual memory recognition.&lt;/p&gt;
&lt;h3 id="update"&gt;Platform Updates&lt;/h3&gt;
&lt;p&gt;If you want to check if your application is up-to-date, check the latest release in here: &lt;a href="https://github.com/lab-neuro-comp/Test-Platform/releases/latest"&gt;https://github.com/lab-neuro-comp/Test-Platform/releases/latest&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;You must do the following: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check the version number in the latest release&lt;/li&gt;
&lt;li&gt;Check the version number in your application&lt;/li&gt;
&lt;li&gt;Download the newest version&lt;/li&gt;
&lt;li&gt;Install it in the same folder of the previous one&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Look for the version released: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/release.png?raw=true" alt="release" /&gt;&lt;/p&gt;
&lt;p&gt;And check your program version to see what is your current:&lt;/p&gt;
&lt;p&gt; &lt;img src="https://github.com/lab-neuro-comp/Test-Platform/blob/master/StroopTest/Resources/help_images/versionEN.png?raw=true" alt="about" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="recommend"&gt;Recommendations&lt;/h3&gt;
&lt;p&gt;For use of the program it is recommended to use Windows 7 operating system or higher. It is also suggested that when using audio recording, use a device that is compatible with your computer and has been previously tested.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="contact"&gt;Want to get in touch?&lt;/h3&gt;
&lt;p&gt;If you encounter any problems fill out this form: &lt;a href="https://github.com/lab-neuro-comp/Test-Platform/issues/new"&gt;https://github.com/lab-neuro-comp/Test-Platform/issues/new&lt;/a&gt; reporting what has happened, or send an email to someone responsible for the project. We recommend contacting if you can not get a question or suggestions!&lt;/p&gt;
&lt;table style="height: 132px; border-color: #000000; width: 627px; float: left;" border="1"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="width: 134.182px;"&gt;Name&lt;/td&gt;
&lt;td style="width: 174.909px;"&gt;Assignment&lt;/td&gt;
&lt;td style="width: 298.545px;"&gt;Contact (GitHub/Email)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="width: 134.182px;"&gt;Ana Garcia&lt;/td&gt;
&lt;td style="width: 174.909px;"&gt;Technical Manager&lt;/td&gt;
&lt;td style="width: 298.545px;"&gt;anacog/anacog@pobox.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="width: 134.182px;"&gt;Fabíola Fleury&lt;/td&gt;
&lt;td style="width: 174.909px;"&gt;Developer&lt;/td&gt;
&lt;td style="width: 298.545px;"&gt;fabiolamfleury/fabiola.mfleury@gmail.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="width: 134.182px;"&gt;Gabriel Albino&lt;/td&gt;
&lt;td style="width: 174.909px;"&gt;Developer&lt;/td&gt;
&lt;td style="width: 298.545px;"&gt;gabrielalbino/enggabrielalbino@gmail.com&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</value>
  </data>
  <data name="wordColorConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
	    &lt;td&gt;Indicates the name of the list. The list name must contain only alphanumeric characters and must have no spaces.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;List Options&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Word list&lt;/td&gt;
            &lt;td&gt;When the word list box is checked, the created word list will be saved.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Color list&lt;/td&gt;
            &lt;td&gt;When the word list box is checked, the created color list is saved. If both boxes have been checked, both lists are saved.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;New Item&lt;/td&gt;
            &lt;td&gt;Opens a screen to fill in a new word and its color. The default color is black.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Delete Item&lt;/td&gt;
            &lt;td&gt;Exclude from the list the word and its corresponding color selected with the "Delete" button.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Move Item&lt;/td&gt;
            &lt;td&gt;Repositions the selected color word in the list with the "Up" and "Down" buttons.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="backgroundColorError" xml:space="preserve">
    <value>Background color of the program should be 'false' or a color hexadecimal code</value>
  </data>
  <data name="defaultColorList" xml:space="preserve">
    <value>#F8E000 #007BB7 #7EC845 #D01C1F</value>
  </data>
  <data name="defaultReactionProgram" xml:space="preserve">
    <value>default 12 1000 1 2000 false false #000000 False 0 #FFFF00 shapes false false + #FF0000 True square, False 4 space false false 10 false false 500</value>
  </data>
  <data name="defaultReactionProgramError" xml:space="preserve">
    <value>Couldn't write default Reaction Test program.</value>
  </data>
  <data name="defaultStroopInstruction1" xml:space="preserve">
    <value>This test will present colored words in random order. Words will appear and rapidly disappear</value>
  </data>
  <data name="defaultStroopInstruction2" xml:space="preserve">
    <value>Say out loud the color that the word is painted</value>
  </data>
  <data name="defaultStroopInstruction3" xml:space="preserve">
    <value>This task will start now</value>
  </data>
  <data name="defaultStroopProgram" xml:space="preserve">
    <value>default 16 1000 true 1000 False default_words.lst default_color.lst false true false 1 false txt false false 160 false false false false 0 0 false false</value>
  </data>
  <data name="defaultWordList" xml:space="preserve">
    <value>yellow blue green red</value>
  </data>
  <data name="expositionTypeError" xml:space="preserve">
    <value>Exposition type must be one of the following</value>
  </data>
  <data name="fileName" xml:space="preserve">
    <value>File name  </value>
  </data>
  <data name="fileNameError" xml:space="preserve">
    <value>of list must finish with .lst</value>
  </data>
  <data name="fileNameError1" xml:space="preserve">
    <value>Program name in file must be equal to file name. </value>
  </data>
  <data name="fixPointColorError" xml:space="preserve">
    <value>Color of the fixation point should be 'false' or a color hexadecimal code</value>
  </data>
  <data name="fixPointError" xml:space="preserve">
    <value>The point of fixation of the program must be represented by: \ n '+' - cross-sectional point \ n'o '- fixing point circle \ n'false' - if there is no point;</value>
  </data>
  <data name="notCreated" xml:space="preserve">
    <value>wasn't written\n\n</value>
  </data>
  <data name="reactionTestHeader" xml:space="preserve">
    <value>program\t#\tparticipant\tdate\tInitial Time\tExposition time\tResponse Type\tReaction Time(ms)\tInterval(ms)\tEstimated Interval(ms)\tExposition Duration(ms)\tExposition(ms)\tsenquency\tpos\tUser response\tList1\tStimulus1\tList2\tStimulus2 Type\tstimulus\tStimulus Color\tBeep</value>
  </data>
  <data name="responseTypeError" xml:space="preserve">
    <value>Selected response type is invalid. Valid options are: spacebar or key arrows.</value>
  </data>
  <data name="stroopResultHeader" xml:space="preserve">
    <value>program\t#\tparticipant\tdate\thour\ttime(ms)\tsequency\tStimulus type\tSubtitle\tSubtitle position\tstimulus\tcolor\taudio</value>
  </data>
  <data name="subtitleColorError" xml:space="preserve">
    <value>Subtitle color must be 'false' or a hex color code</value>
  </data>
  <data name="subtitlePositionError" xml:space="preserve">
    <value>Subtitle position</value>
  </data>
  <data name="subtitlePositionError1" xml:space="preserve">
    <value>must be a number between 1 and 5.</value>
  </data>
  <data name="wordColorError" xml:space="preserve">
    <value>Word point color must be 'false' or a hexadecimal color code</value>
  </data>
  <data name="defaultReactionInstructions1" xml:space="preserve">
    <value>Random squares will be displayed. Press the space bar when you see the square.</value>
  </data>
  <data name="defaultReactionInstructions2" xml:space="preserve">
    <value>The task will start now</value>
  </data>
  <data name="open" xml:space="preserve">
    <value>open</value>
  </data>
  <data name="listError" xml:space="preserve">
    <value>Choose a list</value>
  </data>
  <data name="arrowDown" xml:space="preserve">
    <value>arrowDown</value>
  </data>
  <data name="arrowLeft" xml:space="preserve">
    <value>arrowLeft</value>
  </data>
  <data name="arrowRight" xml:space="preserve">
    <value>arrowRight</value>
  </data>
  <data name="arrowUp" xml:space="preserve">
    <value>arrowUp</value>
  </data>
  <data name="spaceBar" xml:space="preserve">
    <value>spaceBar</value>
  </data>
  <data name="deleteProgram" xml:space="preserve">
    <value>Delete program:</value>
  </data>
  <data name="programDeleted" xml:space="preserve">
    <value>was deleted sucessful!</value>
  </data>
  <data name="programExistsInBackup" xml:space="preserve">
    <value>A program with this name already exists in backup folder. \n Do you want to overwrite it?</value>
  </data>
  <data name="programNotDeleted" xml:space="preserve">
    <value>The program will not be deleted!</value>
  </data>
  <data name="recoveredSucessful" xml:space="preserve">
    <value>All selected programs were recovered successful.</value>
  </data>
  <data name="programRecovered" xml:space="preserve">
    <value>was recovered sucessful!</value>
  </data>
  <data name="programNotRecovered" xml:space="preserve">
    <value>The program will not be recovered!</value>
  </data>
  <data name="conflictsFound" xml:space="preserve">
    <value>conflict(s) found. Do you want to treat them now?</value>
  </data>
  <data name="conflict" xml:space="preserve">
    <value>Conflict</value>
  </data>
  <data name="delete" xml:space="preserve">
    <value>delete</value>
  </data>
  <data name="recover" xml:space="preserve">
    <value>recover</value>
  </data>
  <data name="deletedExperiments" xml:space="preserve">
    <value>Deleted experiments:</value>
  </data>
  <data name="deletedPrograms" xml:space="preserve">
    <value>Deleted files:</value>
  </data>
  <data name="existingExperiments" xml:space="preserve">
    <value>Existing experiments:</value>
  </data>
  <data name="existingPrograms" xml:space="preserve">
    <value>Existing files:</value>
  </data>
  <data name="toDeleteExperiments" xml:space="preserve">
    <value>Experiments that will be deleted:</value>
  </data>
  <data name="toDeletePrograms" xml:space="preserve">
    <value>Files that will be deleted:</value>
  </data>
  <data name="toRecoverExperiments" xml:space="preserve">
    <value>Experiments that will be recovered:</value>
  </data>
  <data name="toRecoverPrograms" xml:space="preserve">
    <value>Files that will be recovered:</value>
  </data>
  <data name="warningDelete" xml:space="preserve">
    <value>Warning: Items marked in red indicate that there's existing files with same name in backup folder. Deleting these files will overwrite the existing ones, and you will not be able to recover them.</value>
  </data>
  <data name="warningRecover" xml:space="preserve">
    <value>Warning: Items marked in red indicate that there's existing files with same name. Recovering these files will overwrite the existing ones, and you will not be able to recover them.</value>
  </data>
  <data name="deletedSucessful" xml:space="preserve">
    <value>All selected programs were deleted successful.</value>
  </data>
  <data name="expoTypeError" xml:space="preserve">
    <value>Exposition type must be selected.</value>
  </data>
  <data name="savePending" xml:space="preserve">
    <value>There might have unsaved changes in the program. Do you wish to save them?</value>
  </data>
  <data name="savePendingTitle" xml:space="preserve">
    <value>Unsaved changes</value>
  </data>
  <data name="unsavedLists" xml:space="preserve">
    <value>There might have unsaved changes in the list. Do you wish to save them?</value>
  </data>
  <data name="unsavedListsTitle" xml:space="preserve">
    <value>Unsaved lists</value>
  </data>
  <data name="experimentConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%"&gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Experiment name&lt;/td&gt;
            &lt;td&gt;It should be made with the name of the experiment that will be created. The name must contain only alphanumeric characters and should not contain any space. This same name is used 

when choosing the experiment that is run on the results page and import / export&lt;/td&gt;
         &lt;/tr&gt;
         &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Exposition&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%"&gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
		Random order
            &lt;/td&gt;
            &lt;td&gt;
               Indicates whether the exposure of the programs will be made at random in relation to the order that the user added. If the option is selected the user can select a Training.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Time&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%"&gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Interval(ms)&lt;/td&gt;
            &lt;td&gt;Indicates the interval between one program and another during the experiment&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Program &lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%"&gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Add&lt;/td&gt;
            &lt;td&gt;Adds a program to the list of experiment programs.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Training&lt;/td&gt;
            &lt;td&gt;In random order the training program will always be the first test to be performed.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Delete&lt;/td&gt;
            &lt;td&gt;Removes the selected program program from the program list of the experiment.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Others&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%"&gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Instructions&lt;/td&gt;
            &lt;td&gt;Describes the guidelines for the participant on the test run. Each displayed line will be displayed on a screen for 4 seconds.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="stroopConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Program name&lt;/td&gt;
            &lt;td&gt;It should be filled in with the name of the program that will be created. The name must contain only alphanumeric characters and should not contain any space. This same name will be used when choosing the program to be executed on the results and import / export page&lt;/td&gt;
         &lt;/tr&gt;
         &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Exposition&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus type&lt;/td&gt;
            &lt;td&gt;
	    In this field you must choose one of the types of stimulus available, they are: &lt;br&gt;
               &lt;ul&gt;
                  &lt;li&gt; Word: In this mode a list of words and a list of colors for the word must be chosen, and from this the program will display the colored words &lt;/li&gt;
                  &lt;li&gt; Image: In this type a list of images must be chosen and from there the program will expose the images contained in the list. &lt;/li&gt;
                  &lt;li&gt; Image and word: In this type should be chosen a list of images and one of words. The generated program will alternately display one item from each list at a time. &lt;/Li&gt;
                  &lt;li&gt; Word with audio: This type should select a list of words and an audio list that will be played by the program in the display of colored words with audio exposure. &lt;/li&gt;
                  &lt;li&gt; Image with audio: In this type you should select a list of images and another list of audio that will be played by the program.&lt;/li&gt;
               &lt;/ul&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Number of attempts&lt;/td&gt;
            &lt;td&gt;Sets the amount of user attempts. The number of attempts is equal to the number of stimulus that will be shown. &lt;br&gt; When the number of items in the lists is less than the number of attempts, the number of items in the lists will be used, repeating the items necessary to reach the number of attempts. Likewise, when the number of items in the lists is greater than the number of attempts, the number of items in the lists corresponding to the number of attempts will be used.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Random order
            &lt;/td&gt;
            &lt;td&gt;
		Indicates whether the exposure of the stimulus will be made randomly in relation to the order of the list.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
		Word size
            &lt;/td&gt;
            &lt;td&gt;
               Indicates the font size of the text for "Word", "Word with audio" or "Image and word". The default size is 160.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Word color
            &lt;/td&gt;
            &lt;td&gt;
               Indicates the color of the word, for "Word and Image" or "Image and Word". The default color is black.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Expand Image
            &lt;/td&gt;
            &lt;td&gt;
               Sets the image expansion to the limit proportional to the screen. You can not simultaneously play the caption.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Rotate Image
            &lt;/td&gt;
            &lt;td&gt;
               Sets the image rotation at the angle and direction indicated in the list.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Lists &lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Words
            &lt;/td&gt;
            &lt;td&gt;
               Loads the list of words that will be displayed for the "Word" and "Word with Audio" types. Non-random display will follow the order of the words in the list.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Colors&lt;/td&gt;
            &lt;td&gt;Loads the color list of words that will be displayed for the "Word" and "Word with Audio" types. Non-random exposure will follow the order of the colors in the list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Images&lt;/td&gt;
            &lt;td&gt;Loads the list of images that will be displayed for the types "Image", "Image with Audio" and "Image and Word". Non-random exposure will follow the order of images in the list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Audios&lt;/td&gt;
            &lt;td&gt;Loads the list of audios that will be played in the test for the "Audio Word" and "Audio Picture" types. Non-random exposure will follow the order of the audios in the list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Time&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Exposition(ms)
            &lt;/td&gt;
            &lt;td&gt;
		Sets the duration in milliseconds of the chosen stimulus exposure, word or image.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Interval(ms)&lt;/td&gt;
            &lt;td&gt;Sets the time in milliseconds between attempts.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Variable Interval Time&lt;/td&gt;
            &lt;td&gt;Indicates that the interval will have the duration varied randomly from 400ms to the interval time reported.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Delay&lt;/td&gt;
            &lt;td&gt;Sets the time in milliseconds between paired stimuli for the word, image, or word and image types. If not informed, interval time will be used.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Subtitle&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Enable&lt;/td&gt;
            &lt;td&gt;Indicates whether the image display will have caption. When activating, it must be selected list of words to be displayed as caption.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Color&lt;/td&gt;
            &lt;td&gt;Indicates the color of the caption. The color black will be used, if not informed&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Position&lt;/td&gt;
            &lt;td&gt;Indicates the location that the legend will be placed in relation to the stimulus: ←, on the left (pictures); ↑, above (words and pictures); → on the right (pictures); ↓, below (words and pictures); ·, To the center (images); Random, change apposition, according to the type of stimulus&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Fix point&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Type&lt;/td&gt;
            &lt;td&gt;Indicates the shape of the fixing point: + or ·&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Point Color&lt;/td&gt;
            &lt;td&gt;Indicates the color of the fix point.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Others  &lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Capture Audio during Play&lt;/td&gt;
            &lt;td&gt;Indicates that the user's responses will be recorded automatically during execution. An audio file will be generated in the data folder. Requires the NAudio.dll file to be in the same folder as the test. The default is selected.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Background color&lt;/td&gt;
            &lt;td&gt;Sets the color screen behind the stimulus during the presentation. The default is gray screen.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Instructions&lt;/td&gt;
            &lt;td&gt;Describes the guidelines for the participant on the test run. Each displayed line will be displayed on a screen for 4 seconds.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="TRConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Program name&lt;/td&gt;
            &lt;td&gt;It should be filled in with the name of the program that will be created. The name must contain only alphanumeric characters and should not contain any space. This same name will be used when choosing the program to be executed on the results and import / export page&lt;/td&gt;
         &lt;/tr&gt;
         &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Exposition&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus type&lt;/td&gt;
            &lt;td&gt;
	       In this field you must choose one of the types of stimulus available, they are: &lt;br&gt;
               &lt;ul&gt;
                  &lt;li&gt; Shapes: In this mode, one or more geometric shapes in the "Shapes" field must be chosen, and these shapes will be rendered randomly during the exposure. In addition to the geometric form (s) a color / color list must be chosen which will define the color (s) of the geometric shape. &lt;/ Li&gt;
                  &lt;li&gt; Word: In this mode a list of words and a list of colors or a single color for the word must be chosen, and from this the program will display the colored words &lt;/ li&gt;
                  &lt;li&gt; Image: In this type a list of images must be chosen and from there the program will expose the images contained in the list. &lt;/ li&gt;
                  &lt;li&gt; Image and word: In this type should be chosen a list of images and one of words. The generated program will alternately display one item from each list at a time. &lt;/ Li&gt;
                  &lt;li&gt; Word with audio: This type should select a list of words and an audio list that will be played by the program in the display of colored words with audio exposure. &lt;/ li&gt;
                  &lt;li&gt; Image with audio: In this type you should select a list of images and another list of audio that will be played by the program. The exhibition &lt;/ li&gt;
               &lt;/ ul&gt;

            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Stimulus size
            &lt;/td&gt;
            &lt;td&gt;
               The size of the stimulus has different functions depending on the stimulus to which it applies.
               &lt;ul&gt;
                   &lt;li&gt; Shapes: In this type of stimulus the size equals the shape size, in pixels, that will be rendered &lt;/ li&gt;
                   &lt;li&gt; Word: In this type of stimulus, the size equals the font size, in pixels, of the text to be rendered &lt;/ li&gt;
                   &lt;li&gt; Image: In this type of animation, the size is the size of the pixel side of the image to be rendered. &lt;/ li&gt;
                &lt;/ ul&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Font size
            &lt;/td&gt;
            &lt;td&gt;
               The font size, in points, that will be used in words.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Distance from the stimulus to the center of the screen&lt;/td&gt;
            &lt;td&gt;It indicates, in pixels, the distance that the stimulus will be rendered taking as reference the center of the screen.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Number of possible positions&lt;/td&gt;
            &lt;td&gt;
               It indicates the number of possible positions for the stimulus and they are:
                &lt;ul&gt;
                   &lt;li&gt; 1: In this option all the stimuli will appear in the center of the screen. &lt;/ li&gt;
                   &lt;li&gt; 2: In this option the stimuli can appear on the right of the screen or on the left. &lt;/ li&gt;
                   &lt;li&gt; 4: In this option the stimuli can appear in the positions: below the center, above the center, to the right of the center or to the left of the center. &lt;/ li&gt;
                   &lt;li&gt; 8: In this option the stimuli can appear in the positions: below the center, above the center, to the right of the center, to the left of the center or to any of the diagonals. &lt;/ li&gt;
                &lt;/ ul&gt;

            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Number of attempts&lt;/td&gt;
            &lt;td&gt;Sets the amount of user attempts. The number of attempts is equal to the number of stimuli that will be shown. &lt;br&gt; When the number of items in the lists is less than the number of attempts, the number of items in the lists will be used, repeating the items necessary to reach the number of attempts . Likewise, when the number of items in the lists is greater than the number of attempts, the number of items in the lists corresponding to the number of attempts will be used.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Random order
            &lt;/td&gt;
            &lt;td&gt;
               Indicates whether the exposure of the stimuli will be made randomly in relation to the order of the list.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Use beep
            &lt;/td&gt;
            &lt;td&gt;
               Indicates whether a beep will be played together with the rendering of the stimulus.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Random beep
            &lt;/td&gt;
            &lt;td&gt;
               	Indicates whether the beep will be random. If it is random, it will only play in some renderings, if it is not random, it will play in all the stimuli.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Beep duration (ms)
            &lt;/td&gt;
            &lt;td&gt;
               Indicates by how many milliseconds the beep will play
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
		Type of color of the stimulus
            &lt;/td&gt;
            &lt;td&gt;
               Indicates whether the stylus should have a single color throughout the program (Single Color) or whether it will be several different colors. In the case of several different colors these colors must be within a color list.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Stimulus color
            &lt;/td&gt;
            &lt;td&gt;
               Indicates the color of the stimulus.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Lists&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Words
            &lt;/td&gt;
            &lt;td&gt;
               Loads the list of words that will be displayed for the types "Word", "Word and Image" and "Word with Audio". Non-random display will follow the order of the words in the list.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Colors&lt;/td&gt;
            &lt;td&gt;Loads the color list of the words that will be displayed for the types "Shapes", "Word", "Word and Image" and "Word with Audio". Non-random exposure will follow the order of the colors in the list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Images&lt;/td&gt;
            &lt;td&gt;Loads the list of images that will be displayed for the types "Image", "Image with Audio" and "Word and Image". Non-random exposure will follow the order of the images in the list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Audios&lt;/td&gt;
            &lt;td&gt;Loads the list of audios that will be played in the test for the "Audio Word" and "Audio Picture" types. Non-random exposure will follow the order of the audios in the list.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Time &lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;
               Exposition(ms)
            &lt;/td&gt;
            &lt;td&gt;
               Sets the duration in milliseconds of the chosen stimulus exposure, word or image.
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Interval(ms)&lt;/td&gt;
            &lt;td&gt;Sets the time in milliseconds between attempts.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Variable Interval Time&lt;/td&gt;
            &lt;td&gt;Indicates that the interval will have the duration varied randomly from 400ms to the interval time reported.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Forms&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Forms&lt;/td&gt;
            &lt;td&gt;Indicates which geometric shapes will be used in the program of type "shapes"&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;FixPoint &lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Type&lt;/td&gt;
            &lt;td&gt;Indicates the shape of the fixing point: + or ·&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Fixpoint Color&lt;/td&gt;
            &lt;td&gt;Indicates the color of the fixation point.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;User answers&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;User response&lt;/td&gt;
            &lt;td&gt;Indicates which keys the user will press to respond to the stimulus.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;Others&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Background color&lt;/td&gt;
            &lt;td&gt;Sets the color screen behind the stimulus during the presentation. The default is white screen.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Instructions&lt;/td&gt;
            &lt;td&gt;Describes the guidelines for the participant on the test run. Each displayed line will be displayed on a screen for 4 seconds.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="experimentResultInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Export as .cvs&lt;/td&gt;
            &lt;td&gt;It exports the results to a file with values separated by comma, which can be opened by spreadsheet editors programs (ex: libre office).&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Results&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;experiment&lt;/td&gt;
            &lt;td&gt;Indicates the name of the experiment that was run.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;program&lt;/td&gt;
            &lt;td&gt;Indicates the name of the program that was running at the time of the stimulus.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Participant&lt;/td&gt;
            &lt;td&gt;Shows the user name&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Date&lt;/td&gt;
            &lt;td&gt;Indicates the that date the program was run&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Starting time&lt;/td&gt;
            &lt;td&gt;Indicates the exact moment the user started the &lt;u&gt;experiment&lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;test time&lt;/td&gt;
            &lt;td&gt;Indicates the exact moment the user started the &lt;u&gt;program&lt;/u&gt;&lt;/td&gt;
         &lt;tr&gt;
            &lt;td&gt;Sequence&lt;/td&gt;
            &lt;td&gt;Indicates the chronological order in which the program appeared for the user&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="fileManagmentConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Existing files / Deleted files&lt;/td&gt;
            &lt;td&gt;This list indicates the files that exist and &lt;u&gt;can be deleted&lt;/u&gt; or the files that have been deleted and &lt;u&gt;can be recovered&lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Files to be restored / deleted&lt;/td&gt;
            &lt;td&gt;This list indicates which files exist and &lt;u&gt; will be deleted &lt;/u&gt; or deleted files &lt;u&gt;will be recovered &lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td style = "color: red"&gt;Red files&lt;/td&gt;
            &lt;td&gt;The files indicated in red by the list indicate that they already have a program or experiment with the same name in the source folder and restoring / deleting this file will result in the loss of the file with the same name in the destination folder&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="TRResultsInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;a
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Export as .cvs&lt;/td&gt;
            &lt;td&gt;It exports the results to a file with values separated by comma, which can be opened by spreadsheet editors programs (ex: libre office).&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Results&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;program&lt;/td&gt;
            &lt;td&gt;Indicates the name of the program that was running at the time of the stimulus.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Participant&lt;/td&gt;
            &lt;td&gt;Shows the user name&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Date&lt;/td&gt;
            &lt;td&gt;Indicates the that date the program was run&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Starting time&lt;/td&gt;
            &lt;td&gt;Indicates the exact moment the user started the test&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Exhibition time&lt;/td&gt;
            &lt;td&gt;Indicates the exact moment when the exposure occurred&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;TR(ms)&lt;/td&gt;
            &lt;td&gt;Indicates the reaction time of the user to the stimulus shown, which can be negative in case of anticipation of the response, zero if there was no reaction to the stimulus or 

positive if there was a reaction in time.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Interva(ms)&lt;/td&gt;
	    &lt;td&gt;Elapsed time between the stimulus shown and the next, and may be random or not according to the configuration of the program, except in case of anticipation of the response of the 

user to the stimulus or if there is no reaction to the stimulus(ms)&lt;/td&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Estimated Interval(ms)&lt;/td&gt;
            &lt;td&gt;Elapsed time between the stimulus shown and the next, which may be random or not according to the program configuration&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Exposure time(ms)&lt;/td&gt;
            &lt;td&gt;Moment in which the stimulus was shown having as reference the beginning of the execution of the program.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Exposition(ms)&lt;/td&gt;
            &lt;td&gt;Indicates how long the exposure has appeared (if user responds the total exposure time is equivalent to the reaction time)&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Sequence&lt;/td&gt;
            &lt;td&gt;Indicates the chronological order in which the stimulu appeared for the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Position&lt;/td&gt;
            &lt;td&gt;Indicates in which position the stimulus was rendered&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;User answer&lt;/td&gt;
            &lt;td&gt;Indicates which key was pressed by the user to respond to the stimulus&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus type&lt;/td&gt;
            &lt;td&gt;Indicates which type of stimulus was shown to the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus&lt;/td&gt;
            &lt;td&gt;Indicates the name of the stimulus that was displayed to the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Stimulus color&lt;/td&gt;
            &lt;td&gt;Indicates the color that the stimulus appeared to the user&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Beep&lt;/td&gt;
            &lt;td&gt;Indicates whether or not the beep was rendered when rendering the stimulus&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="deleteList" xml:space="preserve">
    <value>Are you sure that you want to delete all the selected lists?</value>
  </data>
  <data name="listsDeleted" xml:space="preserve">
    <value>All selected lists were deleted sucessful!</value>
  </data>
  <data name="exportSuccess" xml:space="preserve">
    <value>Files were exported with success!</value>
  </data>
  <data name="listDeleteInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Existing lists&lt;/td&gt;
	    &lt;td&gt;Indicates the lists and the lists child files that currently exists.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Files that will be removed&lt;/td&gt;
            &lt;td&gt;Indicates the lists and the lists child files that will be removed.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="importSuccess" xml:space="preserve">
    <value>Files were imported with success.</value>
  </data>
  <data name="agreeConditions" xml:space="preserve">
    <value>You have to agree with conditions to proceed.</value>
  </data>
  <data name="fieldNotFilled" xml:space="preserve">
    <value>This field can't be left blank.</value>
  </data>
  <data name="exportInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Existing files&lt;/td&gt;
            &lt;td&gt;This field shows the lists, programs or experiments that exist and &lt;u&gt;can be exported&lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Files being exported&lt;/td&gt;
            &lt;td&gt;This list indicates which files exist and &lt;u&gt; will be exported&lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Export&lt;/td&gt;
            &lt;td&gt;Save all the lists, programs or experiments into a zip file, that can be imported from any computer&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="importInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;File&lt;/td&gt;
            &lt;td&gt;Selects the zip file with lists, programs or experiments that will be imported&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Import all files&lt;/td&gt;
            &lt;td&gt;Check this box if you want all programs in file to be imported&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Existing files&lt;/td&gt;
            &lt;td&gt;This field shows the lists, programs or experiments that exist in the zip file and &lt;u&gt;can be imported&lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Files being imported&lt;/td&gt;
            &lt;td&gt;This list indicates which files&lt;u&gt; will be imported&lt;/u&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Import&lt;/td&gt;
            &lt;td&gt;Save all the lists, programs or experiments from a zip file into the lists, programs or experiments directory, being possible to use them.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="createNewList" xml:space="preserve">
    <value>Create new list</value>
  </data>
  <data name="String1inFormListWarning" xml:space="preserve">
    <value>You will be redirected back to program editing after create the list.</value>
  </data>
  <data name="audioRecordFailed" xml:space="preserve">
    <value>The file was generated but no audio was captured.</value>
  </data>
  <data name="deleteFiles" xml:space="preserve">
    <value>Are you sure that you want to move all the selected lists?</value>
  </data>
  <data name="filesNotDeleted" xml:space="preserve">
    <value>No file was moved.</value>
  </data>
  <data name="listsNotDeleted" xml:space="preserve">
    <value>No list was deleted.</value>
  </data>
  <data name="listNotAlphanumeric" xml:space="preserve">
    <value>The list name must be composed only of alphanumerical characters and no spaces. Example: 'MyList'</value>
  </data>
  <data name="random" xml:space="preserve">
    <value>random</value>
  </data>
  <data name="training" xml:space="preserve">
    <value>Training</value>
  </data>
  <data name="removeProgramFromExperiment" xml:space="preserve">
    <value>Wish to remove the program from the experiment?</value>
  </data>
  <data name="audioDeviceNotAvailable" xml:space="preserve">
    <value>There are no devices available to record audio.</value>
  </data>
  <data name="MatchConfigInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Program name&lt;/td&gt;
            &lt;td&gt;Should be the name of the program that will be created. Program names should only have alphanumeric characters and have no spaces. This name will be the same name that must be selected when selecting a program to be executed and in the export/import&lt;/td&gt;
         &lt;/tr&gt;
         &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Exposition&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Exposition type&lt;/td&gt;
            &lt;td&gt;
                The matching test working this way: will be exposed a model and some stimulus for the participant choose, The model will aways appears as stimulu.&lt;br&gt;
                The way that the participant will react to the stimulus will depends of exposition type, that are:&lt;br&gt;
                &lt;ul&gt;
                  &lt;li&gt;DMTS: The participant must choose the stimulus that is equal to the model shown.&lt;/li&gt;
                  &lt;li&gt;DNMTS: The participant must NOT choose the estimate that is equal to the model shown.&lt;/li&gt;
                  &lt;li&gt;DMTS/DNMTS: The participant will be exposed, alternately, to DMTS and DNMTS, making the appropriate choice for the type of exhibition that will be displayed.&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Stimulu type&lt;/td&gt;
            &lt;td&gt;Stimulus Type sets the type of stimulus to be displayed, the alternatives being:&lt;br&gt;
            &lt;ul&gt;
                &lt;li&gt;Image: It should be chosen a list of images that will be shown as stimulus&lt;/li&gt;
                &lt;li&gt;Word: A list of words and a fixed color must be chosen for them to be displayed&lt;/li&gt;
                &lt;li&gt;Word and Color: Two lists should be chosen, one being a word and one color, so that each word appears with a color from the list&lt;/li&gt;
            &lt;/ul&gt;
            Comments:&lt;br&gt; 
            &lt;ul&gt;
                &lt;li&gt;The number of elements in the list of words or images must always be greater than the number of stimuli.&lt;/li&gt;
                &lt;li&gt;The number of elements in the list should preferably be greater than the total number of stimuli that will be shown.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Stimulus number&lt;/td&gt;
            &lt;td&gt;Defines how many stimuli will appear after the model so that the participant chooses one of them.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Attempts number&lt;/td&gt;
            &lt;td&gt; Sets the number of retries the user will have.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Exposition size&lt;/td&gt;
            &lt;td&gt;Defines the size of the stimulus and its meaning varies for each type of main stimulus:&lt;br&gt;
            &lt;ul&gt;
                &lt;li&gt;For image list: The size of the stimulus defines, in pixels, the size of the square that the image will be displayed.&lt;/li&gt;
                &lt;li&gt;For list of words: The size of the stimulus defines, in pixels, the font size that the word will be rendered.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Random position&lt;/td&gt;
            &lt;td&gt;Sets whether to use preset positions or random positions.&lt;br&gt;
            &lt;ul&gt;
                &lt;li&gt;Stimuli: The stimuli will appear in random positions, but they will never overlap.&lt;/li&gt;
                &lt;li&gt;Model: The model will appear in a random position.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Random order&lt;/td&gt;
            &lt;td&gt;Defines whether the order of appearance of exposures will follow the order in the list or whether they will be reordered at the beginning of each program run.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Finish model exposition with click&lt;/td&gt;
            &lt;td&gt;Sets whether the model will disappear if the participant clicks it.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Lists&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;        
         &lt;tr&gt;
            &lt;td&gt;Words&lt;/td&gt;
            &lt;td&gt;Defines the list of words that will be used in the exposition of words or words and colors.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Colors&lt;/td&gt;
            &lt;td&gt;Sets the color list that will be used in the exposition of words and colors.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Images&lt;/td&gt;
            &lt;td&gt; Sets the list of images that will be used in the image exposition.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Audios&lt;/td&gt;
            &lt;td&gt;There is still no use for this type of list in the test of choice.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Time&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;        
         &lt;tr&gt;
             &lt;td&gt;Model exposition(ms)&lt;/td&gt;
             &lt;td&gt;Sets, in ms, the time the model will be exposed.&lt;/td&gt;
         &lt;/tr&gt;     
         &lt;tr&gt;
             &lt;td&gt;Stimulu exposition(ms)&lt;/td&gt;
             &lt;td&gt;Sets, in ms, the time the stimuli will be exposed.&lt;/td&gt;
         &lt;/tr&gt;     
         &lt;tr&gt;
             &lt;td&gt;Delay between model and stimulus(ms)&lt;/td&gt;
             &lt;td&gt;Sets, in ms, the interval time between the model and the stimuli.&lt;/td&gt;
         &lt;/tr&gt;     
         &lt;tr&gt;
             &lt;td&gt;Delay between attempts(ms)&lt;/td&gt;
             &lt;td&gt;Sets, in ms, the interval time between the stimuli and the model of the next exposure.&lt;/td&gt;
         &lt;/tr&gt;     
         &lt;tr&gt;
            &lt;td&gt;Atraso entre modelo e estimulo variável&lt;/td&gt;
            &lt;td&gt;Sets whether the interval between attempts is random.&lt;br&gt;
            &lt;ul&gt;
                &lt;li&gt;If this option is checked, the delay will be random, but never greater than the delay between attempts.&lt;/li&gt;
                &lt;li&gt;The delay between attempts should be greater than or equal to 400ms.&lt;/li&gt;
            &lt;/td&gt;
        &lt;/tr&gt;   
        &lt;tr&gt;
            &lt;td&gt;Variable delay between model and stimuli&lt;/td&gt;
            &lt;td&gt;Sets whether the interval between the model and the stimuli is random.&lt;br&gt;
            &lt;ul&gt;
                &lt;li&gt;If this option is checked, the delay will be random, but never greater than the delay between the model and the stimuli.&lt;/li&gt;
                &lt;li&gt;The delay between model and stimuli should be greater than or equal to 400ms.&lt;/li&gt;
            &lt;/td&gt;
         &lt;/tr&gt;   
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Colors&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;   
         &lt;tr&gt;
              &lt;td&gt;DMTS Background &lt;/td&gt;
              &lt;td&gt; Defines DMTS expostion background
                  &lt;li&gt;If the type of exposure is DMTS / DNMTS what will indicate the current exposure type is the background color.&lt;/li&gt;
              &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
              &lt;td&gt;DNMTS Background &lt;/td&gt;
              &lt;td&gt;Defines DNMTS expostion background
                &lt;li&gt;If the type of exposure is DMTS / DNMTS what will indicate the current exposure type is the background color.&lt;/li&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
              &lt;td&gt;Words&lt;/td&gt;
              &lt;td&gt;Words In the 'words' expostion type, this will be the color in which all the words in the list will be rendered.&lt;/td&gt;
         &lt;/tr&gt;   
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Auditory signaling&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Options&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
             &lt;td&gt;Exposition&lt;/td&gt;
             &lt;td&gt;Sets if will be an auditory signaling when an exposition is shown&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
             &lt;td&gt;Match / Error&lt;/td&gt;
             &lt;td&gt;Sets if will be an auditory signaling when the participant match of do not match the chosen stimulu with the model.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
             &lt;td&gt;Commission&lt;/td&gt;
             &lt;td&gt;Sets if will be an error auditory signaling when user click on model with the option 'End model exposition with click' disabled. &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
             &lt;td&gt;Omission&lt;/td&gt;
             &lt;td&gt;Sets if will be an error auditory signaling when the participant do not click on model or the stimulu in time.&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Instructions&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
             &lt;td colspan = "2"&gt;Defines the text that will be displyed at start of the program, each line in this text will be rendered in a blank screen at exposition.&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="posNumberNotImplemented" xml:space="preserve">
    <value>Position number currently not implemented.</value>
  </data>
  <data name="dispositionError" xml:space="preserve">
    <value>A-B disposition must be selected.</value>
  </data>
  <data name="audioListError" xml:space="preserve">
    <value>choose an audio list</value>
  </data>
  <data name="colorListError" xml:space="preserve">
    <value>choose a color list</value>
  </data>
  <data name="imgListError" xml:space="preserve">
    <value>choose a image list</value>
  </data>
  <data name="matchingTestHeader" xml:space="preserve">
    <value>Program\t#\tParticipant\tDate\tInitial Time\tExposition Time\tModel Reaction Time(ms)\tStimulu Reaction Time(ms)\tInterval between attempts(ms)\tInterval(ms)\tModel Exposition(ms)\tStimulu Exposition(ms)\tSenquency\tTest Type\tStimulus Type\tList\tModel first position\tModel\tModel color\t2nd Stimulu\t3rd Stimulu\t4th Stimulu\t5th Stumulu\t6th Stimulu\t7th Stimulu\t8th Stimulu\tModel second position\tClicked Stimulu\tClicked Stimulu Color\tClicked Stimulu Position\tMatch</value>
  </data>
  <data name="CannotBeEmpty" xml:space="preserve">
    <value>This field should be filled</value>
  </data>
  <data name="matchingTest" xml:space="preserve">
    <value>Matching Test</value>
  </data>
  <data name="model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="stimulu" xml:space="preserve">
    <value>Stimulu</value>
  </data>
  <data name="image" xml:space="preserve">
    <value>Imagem</value>
  </data>
  <data name="imageAndWord" xml:space="preserve">
    <value>Image and Word</value>
  </data>
  <data name="imageWithAudio" xml:space="preserve">
    <value>Image with Audio</value>
  </data>
  <data name="shape" xml:space="preserve">
    <value>Shape</value>
  </data>
  <data name="word" xml:space="preserve">
    <value>Word</value>
  </data>
  <data name="wordWithAudio" xml:space="preserve">
    <value>Word with Audio</value>
  </data>
  <data name="recoverList" xml:space="preserve">
    <value>Are you sure that you want to recover all the selected lists?</value>
  </data>
  <data name="listsNotRecovered" xml:space="preserve">
    <value>No list was recovered.</value>
  </data>
  <data name="listsRecovered" xml:space="preserve">
    <value>All selected lists were recovered sucessful!</value>
  </data>
  <data name="impossibleUseListWarn" xml:space="preserve">
    <value>The list is smaller than the number of stimulus. Reduce the number of stimulus or choose a larger list</value>
  </data>
  <data name="smallImageList" xml:space="preserve">
    <value>The list has less elements than the necessary, image repetition may occur</value>
  </data>
  <data name="wordListError" xml:space="preserve">
    <value>choose a word list</value>
  </data>
  <data name="cantBeFoundPleaseRocoverFirst" xml:space="preserve">
    <value>is a program of the experiment that doesn't exists in your programs folder. Please recover it first or create a new program with same name. (Experiment:</value>
  </data>
  <data name="cannotRecoverFilesByMotive" xml:space="preserve">
    <value>You should create or recover the following lists before recovering the program "</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>Error:</value>
  </data>
  <data name="hasMissingLists" xml:space="preserve">
    <value>has lists that was incorretly deleted: "</value>
  </data>
  <data name="missingListSolution" xml:space="preserve">
    <value>. You must create a list manually or delete the program. Want to delete the program?</value>
  </data>
  <data name="wanstPossibleToRecoverLists" xml:space="preserve">
    <value>Coudn't display lists because the program</value>
  </data>
  <data name="cantEdìtProgramMissingFiles" xml:space="preserve">
    <value>Wasn't possible to open program edition because there is missing files. Recover or create the following lists before continue:</value>
  </data>
  <data name="wordWithColor" xml:space="preserve">
    <value>Word with Color</value>
  </data>
  <data name="matchingResultsInstructions" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         table {
         width:100%;
         }
         table, th, td {
         border: 1px solid black;
         border-collapse: collapse;
         }
         th, td {
         padding: 5px;
         text-align: justify;  
         }
         table#t01 tr:nth-child(even) {
         background-color: #eee;
         }
         table#t01 tr:nth-child(odd) {
         background-color:#fff;
         }
         .subBar {
         background-color: gray;
         color: black;
         }
         .mainBar{
         background-color: black;
         color: white;
         text-align: center;
         }
         li{
         padding-bottom:5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;table id="t01" style = "margin: 0 auto; padding: 0"&gt;
         &lt;tr&gt;
            &lt;td colspan = "2" style = "background: #fff"&gt; &lt;/td&gt;
         &lt;/tr&gt;
         &lt;th class = "mainBar" colspan = "2"&gt;General&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Export as .cvs&lt;/td&gt;
            &lt;td&gt;It exports the results to a file with values separated by comma, which can be opened by spreadsheet editors programs (ex: libre office).&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "mainBar" colspan = "2"&gt;Results&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;th class = "subBar" style = "width: 30%" &gt;Option&lt;/th&gt;
            &lt;th class = "subBar"&gt;Description&lt;/th&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Program&lt;/td&gt;&lt;td&gt;The program name&lt;/td&gt;
         &lt;/tr&gt; 
         &lt;tr&gt;&lt;td&gt;Participant&lt;/td&gt;&lt;td&gt;The participant name&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Date&lt;/td&gt;&lt;td&gt;Date that the program was executed&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Initial Time&lt;/td&gt;&lt;td&gt;Time when the program was executed&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Exposition Time&lt;/td&gt;&lt;td&gt;Time when the exposition was rendered&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Model Reaction Time&lt;/td&gt;&lt;td&gt;Time that participant take to answer to the model&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Stimulu Reaction Time(ms)&lt;/td&gt;&lt;td&gt;Time that participant take to answer to the stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Interval between attempts(ms)&lt;/td&gt;&lt;td&gt;Time elapsed since last attempt&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Interval(ms)&lt;/td&gt;&lt;td&gt;Interval between the model and the stimulus exposition&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Model Exposition(ms)&lt;/td&gt;&lt;td&gt;Time that model stayed in screen&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Stimulu Exposition(ms)&lt;/td&gt;&lt;td&gt;Time that stimulu stayed in screen&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Senquency&lt;/td&gt;&lt;td&gt;Cronological order that stimulus appered to participant&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Test Type&lt;/td&gt;&lt;td&gt;Test type of exposition&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Stimulus Type&lt;/td&gt;&lt;td&gt;Stimulu type of exposition&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;List &lt;/td&gt;&lt;td&gt;Lists that was used in program&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Model first position&lt;/td&gt;&lt;td&gt;Where the model appeared&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Model &lt;/td&gt;&lt;td&gt;Name of the model&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Model color&lt;/td&gt;&lt;td&gt;Color of the model&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;2nd Stimulu&lt;/td&gt;&lt;td&gt;Name of 2nd stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;3rd Stimulu &lt;/td&gt;&lt;td&gt;Name of 3rd stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;4th Stimulu &lt;/td&gt;&lt;td&gt;Name of 4th stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;5th Stumulu &lt;/td&gt;&lt;td&gt;Name of 5th stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;6th Stimulu &lt;/td&gt;&lt;td&gt;Name of 6th stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;7th Stimulu &lt;/td&gt;&lt;td&gt;Name of 7th stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;8th Stimulu &lt;/td&gt;&lt;td&gt;Name of 8th stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Model second position&lt;/td&gt;&lt;td&gt;Where the model appeared as stimulu&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Clicked Stimulu&lt;/td&gt;&lt;td&gt;Name of the stimulu that participant clicked&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Clicked Stimulu Color&lt;/td&gt;&lt;td&gt;Color of the stimulu that participant clicked&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Clicked Stimulu Position&lt;/td&gt;&lt;td&gt;Position of the stimulu that participant clicked&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;&lt;td&gt;Match&lt;/td&gt;&lt;td&gt;User clicked the stimulu equals the model&lt;/td&gt;
         &lt;/tr&gt;
         
      &lt;/table&gt;
   &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="expandImageInvalid" xml:space="preserve">
    <value>Expanding image, there is only one position available, center.</value>
  </data>
  <data name="clickedStimuluPosition" xml:space="preserve">
    <value>Clicked Stimulu Position</value>
  </data>
  <data name="modelFirstPosition" xml:space="preserve">
    <value>Model first position</value>
  </data>
  <data name="modelSecondPosition" xml:space="preserve">
    <value>Model second position</value>
  </data>
  <data name="invalidDate" xml:space="preserve">
    <value>A valid date must be choosen.</value>
  </data>
  <data name="invalidSchoolingLevel" xml:space="preserve">
    <value>Select a level of schooling.</value>
  </data>
  <data name="invalidSex" xml:space="preserve">
    <value>Select a sex.</value>
  </data>
  <data name="invalidYesNoPanel" xml:space="preserve">
    <value>Select yes or no.</value>
  </data>
  <data name="invalidName" xml:space="preserve">
    <value>You must type a name.</value>
  </data>
  <data name="participantAlreadyExistsWishOverride" xml:space="preserve">
    <value>Participant with same identifier already exists. Wish to override?</value>
  </data>
  <data name="participantNotSaved" xml:space="preserve">
    <value>Participant not saved.</value>
  </data>
  <data name="participantSaveSucessful" xml:space="preserve">
    <value>The participant was saved sucessful.</value>
  </data>
  <data name="editParticipant" xml:space="preserve">
    <value>Edit participant:</value>
  </data>
  <data name="createNewParticipant" xml:space="preserve">
    <value>Create new participant</value>
  </data>
  <data name="shouldCloseOpenedForm" xml:space="preserve">
    <value>You should close any opened form before continue.</value>
  </data>
  <data name="shouldSelectReason" xml:space="preserve">
    <value>You should select a valid reason.</value>
  </data>
  <data name="alternatingDMTS_DNMTS" xml:space="preserve">
    <value>DMTS/DNMTS(Alternating)</value>
  </data>
  <data name="randomDMTS_DNMTS" xml:space="preserve">
    <value>DMTS/DNMTS(Random)</value>
  </data>
  <data name="selectAudioFile" xml:space="preserve">
    <value>Select an audio file.</value>
  </data>
  <data name="spacialRecognitionTest" xml:space="preserve">
    <value>Spacial Recognition Test</value>
  </data>
  <data name="defaulStroopProgram" xml:space="preserve">
    <value>padrao 16 1000 true 1000 False padrao_words.lst padrao_color.lst false true false 1 false txt false false 160 false false false false 0 0 false false</value>
  </data>
  <data name="inFormListWarning" xml:space="preserve">
    <value>You will be redirected back to program editing after create the list.</value>
  </data>
  <data name="spacialRecognition" xml:space="preserve">
    <value>Spacial Recognition</value>
  </data>
  <data name="notAvaliable" xml:space="preserve">
    <value>Not avaliable yet.</value>
  </data>
  <data name="defaultSRInstruction1" xml:space="preserve">
    <value>Many stimulus will show up in your screen sequentially</value>
  </data>
  <data name="defaultSRInstruction2" xml:space="preserve">
    <value>Choose only the last one that has appeared</value>
  </data>
  <data name="defaultSRProgram" xml:space="preserve">
    <value>default 3 True default false false 2000 1500 False 1 1 12 4 #000000 1000 False True True True 0
</value>
  </data>
  <data name="defaultMatchingInstruction1" xml:space="preserve">
    <value>A model will appear followed by two stimuli.</value>
  </data>
  <data name="defaultMatchingInstruction2" xml:space="preserve">
    <value>Select the stimulus corresponding to the model</value>
  </data>
  <data name="defaultMatchingProgram" xml:space="preserve">
    <value>default 2 1500 True 1000 False padrao false #FFFFFF DMTS false false false false 1000 18 False True 1500 1500 #404040 4 0 False False #000000 True True False True</value>
  </data>
  <data name="preference_horizontal" xml:space="preserve">
    <value>Preference(Horizontal)</value>
  </data>
  <data name="preference_vertical" xml:space="preserve">
    <value>Preference(Vertical)</value>
  </data>
</root>